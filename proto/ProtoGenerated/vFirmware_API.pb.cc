// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: vFirmware_API.proto

#include "vFirmware_API.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_vFirmware_5fAPI_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Vec_2D_vFirmware_5fAPI_2eproto;
class Vec_2DDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Vec_2D> _instance;
} _Vec_2D_default_instance_;
class VF_CommandsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<VF_Commands> _instance;
} _VF_Commands_default_instance_;
class VF_DataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<VF_Data> _instance;
} _VF_Data_default_instance_;
static void InitDefaultsscc_info_VF_Commands_vFirmware_5fAPI_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_VF_Commands_default_instance_;
    new (ptr) ::VF_Commands();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::VF_Commands::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_VF_Commands_vFirmware_5fAPI_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_VF_Commands_vFirmware_5fAPI_2eproto}, {
      &scc_info_Vec_2D_vFirmware_5fAPI_2eproto.base,}};

static void InitDefaultsscc_info_VF_Data_vFirmware_5fAPI_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_VF_Data_default_instance_;
    new (ptr) ::VF_Data();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::VF_Data::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_VF_Data_vFirmware_5fAPI_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_VF_Data_vFirmware_5fAPI_2eproto}, {
      &scc_info_Vec_2D_vFirmware_5fAPI_2eproto.base,}};

static void InitDefaultsscc_info_Vec_2D_vFirmware_5fAPI_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_Vec_2D_default_instance_;
    new (ptr) ::Vec_2D();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Vec_2D::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Vec_2D_vFirmware_5fAPI_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Vec_2D_vFirmware_5fAPI_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_vFirmware_5fAPI_2eproto[3];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_vFirmware_5fAPI_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_vFirmware_5fAPI_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_vFirmware_5fAPI_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Vec_2D, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Vec_2D, x_),
  PROTOBUF_FIELD_OFFSET(::Vec_2D, y_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::VF_Commands, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::VF_Commands, init_),
  PROTOBUF_FIELD_OFFSET(::VF_Commands, translational_output_),
  PROTOBUF_FIELD_OFFSET(::VF_Commands, rotational_output_),
  PROTOBUF_FIELD_OFFSET(::VF_Commands, kicker_),
  PROTOBUF_FIELD_OFFSET(::VF_Commands, dribbler_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::VF_Data, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::VF_Data, translational_displacement_),
  PROTOBUF_FIELD_OFFSET(::VF_Data, translational_velocity_),
  PROTOBUF_FIELD_OFFSET(::VF_Data, rotational_displacement_),
  PROTOBUF_FIELD_OFFSET(::VF_Data, rotational_velocity_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::Vec_2D)},
  { 7, -1, sizeof(::VF_Commands)},
  { 17, -1, sizeof(::VF_Data)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_Vec_2D_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_VF_Commands_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_VF_Data_default_instance_),
};

const char descriptor_table_protodef_vFirmware_5fAPI_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\023vFirmware_API.proto\"\036\n\006Vec_2D\022\t\n\001x\030\001 \001"
  "(\002\022\t\n\001y\030\002 \001(\002\"\210\001\n\013VF_Commands\022\014\n\004init\030\001 "
  "\001(\010\022%\n\024translational_output\030\002 \001(\0132\007.Vec_"
  "2D\022\031\n\021rotational_output\030\003 \001(\002\022\027\n\006kicker\030"
  "\004 \001(\0132\007.Vec_2D\022\020\n\010dribbler\030\005 \001(\010\"\235\001\n\007VF_"
  "Data\022+\n\032translational_displacement\030\001 \001(\013"
  "2\007.Vec_2D\022\'\n\026translational_velocity\030\002 \001("
  "\0132\007.Vec_2D\022\037\n\027rotational_displacement\030\003 "
  "\001(\002\022\033\n\023rotational_velocity\030\004 \001(\002b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_vFirmware_5fAPI_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_vFirmware_5fAPI_2eproto_sccs[3] = {
  &scc_info_VF_Commands_vFirmware_5fAPI_2eproto.base,
  &scc_info_VF_Data_vFirmware_5fAPI_2eproto.base,
  &scc_info_Vec_2D_vFirmware_5fAPI_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_vFirmware_5fAPI_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_vFirmware_5fAPI_2eproto = {
  false, false, descriptor_table_protodef_vFirmware_5fAPI_2eproto, "vFirmware_API.proto", 360,
  &descriptor_table_vFirmware_5fAPI_2eproto_once, descriptor_table_vFirmware_5fAPI_2eproto_sccs, descriptor_table_vFirmware_5fAPI_2eproto_deps, 3, 0,
  schemas, file_default_instances, TableStruct_vFirmware_5fAPI_2eproto::offsets,
  file_level_metadata_vFirmware_5fAPI_2eproto, 3, file_level_enum_descriptors_vFirmware_5fAPI_2eproto, file_level_service_descriptors_vFirmware_5fAPI_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_vFirmware_5fAPI_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_vFirmware_5fAPI_2eproto)), true);

// ===================================================================

void Vec_2D::InitAsDefaultInstance() {
}
class Vec_2D::_Internal {
 public:
};

Vec_2D::Vec_2D(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Vec_2D)
}
Vec_2D::Vec_2D(const Vec_2D& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&y_) -
    reinterpret_cast<char*>(&x_)) + sizeof(y_));
  // @@protoc_insertion_point(copy_constructor:Vec_2D)
}

void Vec_2D::SharedCtor() {
  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&y_) -
      reinterpret_cast<char*>(&x_)) + sizeof(y_));
}

Vec_2D::~Vec_2D() {
  // @@protoc_insertion_point(destructor:Vec_2D)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Vec_2D::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Vec_2D::ArenaDtor(void* object) {
  Vec_2D* _this = reinterpret_cast< Vec_2D* >(object);
  (void)_this;
}
void Vec_2D::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Vec_2D::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Vec_2D& Vec_2D::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Vec_2D_vFirmware_5fAPI_2eproto.base);
  return *internal_default_instance();
}


void Vec_2D::Clear() {
// @@protoc_insertion_point(message_clear_start:Vec_2D)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&y_) -
      reinterpret_cast<char*>(&x_)) + sizeof(y_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Vec_2D::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // float x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Vec_2D::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Vec_2D)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float x = 1;
  if (!(this->x() <= 0 && this->x() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_x(), target);
  }

  // float y = 2;
  if (!(this->y() <= 0 && this->y() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_y(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Vec_2D)
  return target;
}

size_t Vec_2D::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Vec_2D)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float x = 1;
  if (!(this->x() <= 0 && this->x() >= 0)) {
    total_size += 1 + 4;
  }

  // float y = 2;
  if (!(this->y() <= 0 && this->y() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Vec_2D::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Vec_2D)
  GOOGLE_DCHECK_NE(&from, this);
  const Vec_2D* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Vec_2D>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Vec_2D)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Vec_2D)
    MergeFrom(*source);
  }
}

void Vec_2D::MergeFrom(const Vec_2D& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Vec_2D)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.x() <= 0 && from.x() >= 0)) {
    _internal_set_x(from._internal_x());
  }
  if (!(from.y() <= 0 && from.y() >= 0)) {
    _internal_set_y(from._internal_y());
  }
}

void Vec_2D::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Vec_2D)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Vec_2D::CopyFrom(const Vec_2D& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Vec_2D)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Vec_2D::IsInitialized() const {
  return true;
}

void Vec_2D::InternalSwap(Vec_2D* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Vec_2D, y_)
      + sizeof(Vec_2D::y_)
      - PROTOBUF_FIELD_OFFSET(Vec_2D, x_)>(
          reinterpret_cast<char*>(&x_),
          reinterpret_cast<char*>(&other->x_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Vec_2D::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void VF_Commands::InitAsDefaultInstance() {
  ::_VF_Commands_default_instance_._instance.get_mutable()->translational_output_ = const_cast< ::Vec_2D*>(
      ::Vec_2D::internal_default_instance());
  ::_VF_Commands_default_instance_._instance.get_mutable()->kicker_ = const_cast< ::Vec_2D*>(
      ::Vec_2D::internal_default_instance());
}
class VF_Commands::_Internal {
 public:
  static const ::Vec_2D& translational_output(const VF_Commands* msg);
  static const ::Vec_2D& kicker(const VF_Commands* msg);
};

const ::Vec_2D&
VF_Commands::_Internal::translational_output(const VF_Commands* msg) {
  return *msg->translational_output_;
}
const ::Vec_2D&
VF_Commands::_Internal::kicker(const VF_Commands* msg) {
  return *msg->kicker_;
}
VF_Commands::VF_Commands(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:VF_Commands)
}
VF_Commands::VF_Commands(const VF_Commands& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_translational_output()) {
    translational_output_ = new ::Vec_2D(*from.translational_output_);
  } else {
    translational_output_ = nullptr;
  }
  if (from._internal_has_kicker()) {
    kicker_ = new ::Vec_2D(*from.kicker_);
  } else {
    kicker_ = nullptr;
  }
  ::memcpy(&rotational_output_, &from.rotational_output_,
    static_cast<size_t>(reinterpret_cast<char*>(&dribbler_) -
    reinterpret_cast<char*>(&rotational_output_)) + sizeof(dribbler_));
  // @@protoc_insertion_point(copy_constructor:VF_Commands)
}

void VF_Commands::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_VF_Commands_vFirmware_5fAPI_2eproto.base);
  ::memset(&translational_output_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&dribbler_) -
      reinterpret_cast<char*>(&translational_output_)) + sizeof(dribbler_));
}

VF_Commands::~VF_Commands() {
  // @@protoc_insertion_point(destructor:VF_Commands)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void VF_Commands::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete translational_output_;
  if (this != internal_default_instance()) delete kicker_;
}

void VF_Commands::ArenaDtor(void* object) {
  VF_Commands* _this = reinterpret_cast< VF_Commands* >(object);
  (void)_this;
}
void VF_Commands::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void VF_Commands::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const VF_Commands& VF_Commands::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_VF_Commands_vFirmware_5fAPI_2eproto.base);
  return *internal_default_instance();
}


void VF_Commands::Clear() {
// @@protoc_insertion_point(message_clear_start:VF_Commands)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && translational_output_ != nullptr) {
    delete translational_output_;
  }
  translational_output_ = nullptr;
  if (GetArena() == nullptr && kicker_ != nullptr) {
    delete kicker_;
  }
  kicker_ = nullptr;
  ::memset(&rotational_output_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&dribbler_) -
      reinterpret_cast<char*>(&rotational_output_)) + sizeof(dribbler_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VF_Commands::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool init = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          init_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Vec_2D translational_output = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_translational_output(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float rotational_output = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          rotational_output_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // .Vec_2D kicker = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_kicker(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool dribbler = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          dribbler_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* VF_Commands::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:VF_Commands)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool init = 1;
  if (this->init() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_init(), target);
  }

  // .Vec_2D translational_output = 2;
  if (this->has_translational_output()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::translational_output(this), target, stream);
  }

  // float rotational_output = 3;
  if (!(this->rotational_output() <= 0 && this->rotational_output() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_rotational_output(), target);
  }

  // .Vec_2D kicker = 4;
  if (this->has_kicker()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::kicker(this), target, stream);
  }

  // bool dribbler = 5;
  if (this->dribbler() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_dribbler(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:VF_Commands)
  return target;
}

size_t VF_Commands::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:VF_Commands)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .Vec_2D translational_output = 2;
  if (this->has_translational_output()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *translational_output_);
  }

  // .Vec_2D kicker = 4;
  if (this->has_kicker()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *kicker_);
  }

  // float rotational_output = 3;
  if (!(this->rotational_output() <= 0 && this->rotational_output() >= 0)) {
    total_size += 1 + 4;
  }

  // bool init = 1;
  if (this->init() != 0) {
    total_size += 1 + 1;
  }

  // bool dribbler = 5;
  if (this->dribbler() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void VF_Commands::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:VF_Commands)
  GOOGLE_DCHECK_NE(&from, this);
  const VF_Commands* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<VF_Commands>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:VF_Commands)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:VF_Commands)
    MergeFrom(*source);
  }
}

void VF_Commands::MergeFrom(const VF_Commands& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:VF_Commands)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_translational_output()) {
    _internal_mutable_translational_output()->::Vec_2D::MergeFrom(from._internal_translational_output());
  }
  if (from.has_kicker()) {
    _internal_mutable_kicker()->::Vec_2D::MergeFrom(from._internal_kicker());
  }
  if (!(from.rotational_output() <= 0 && from.rotational_output() >= 0)) {
    _internal_set_rotational_output(from._internal_rotational_output());
  }
  if (from.init() != 0) {
    _internal_set_init(from._internal_init());
  }
  if (from.dribbler() != 0) {
    _internal_set_dribbler(from._internal_dribbler());
  }
}

void VF_Commands::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:VF_Commands)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VF_Commands::CopyFrom(const VF_Commands& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:VF_Commands)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VF_Commands::IsInitialized() const {
  return true;
}

void VF_Commands::InternalSwap(VF_Commands* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(VF_Commands, dribbler_)
      + sizeof(VF_Commands::dribbler_)
      - PROTOBUF_FIELD_OFFSET(VF_Commands, translational_output_)>(
          reinterpret_cast<char*>(&translational_output_),
          reinterpret_cast<char*>(&other->translational_output_));
}

::PROTOBUF_NAMESPACE_ID::Metadata VF_Commands::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void VF_Data::InitAsDefaultInstance() {
  ::_VF_Data_default_instance_._instance.get_mutable()->translational_displacement_ = const_cast< ::Vec_2D*>(
      ::Vec_2D::internal_default_instance());
  ::_VF_Data_default_instance_._instance.get_mutable()->translational_velocity_ = const_cast< ::Vec_2D*>(
      ::Vec_2D::internal_default_instance());
}
class VF_Data::_Internal {
 public:
  static const ::Vec_2D& translational_displacement(const VF_Data* msg);
  static const ::Vec_2D& translational_velocity(const VF_Data* msg);
};

const ::Vec_2D&
VF_Data::_Internal::translational_displacement(const VF_Data* msg) {
  return *msg->translational_displacement_;
}
const ::Vec_2D&
VF_Data::_Internal::translational_velocity(const VF_Data* msg) {
  return *msg->translational_velocity_;
}
VF_Data::VF_Data(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:VF_Data)
}
VF_Data::VF_Data(const VF_Data& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_translational_displacement()) {
    translational_displacement_ = new ::Vec_2D(*from.translational_displacement_);
  } else {
    translational_displacement_ = nullptr;
  }
  if (from._internal_has_translational_velocity()) {
    translational_velocity_ = new ::Vec_2D(*from.translational_velocity_);
  } else {
    translational_velocity_ = nullptr;
  }
  ::memcpy(&rotational_displacement_, &from.rotational_displacement_,
    static_cast<size_t>(reinterpret_cast<char*>(&rotational_velocity_) -
    reinterpret_cast<char*>(&rotational_displacement_)) + sizeof(rotational_velocity_));
  // @@protoc_insertion_point(copy_constructor:VF_Data)
}

void VF_Data::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_VF_Data_vFirmware_5fAPI_2eproto.base);
  ::memset(&translational_displacement_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&rotational_velocity_) -
      reinterpret_cast<char*>(&translational_displacement_)) + sizeof(rotational_velocity_));
}

VF_Data::~VF_Data() {
  // @@protoc_insertion_point(destructor:VF_Data)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void VF_Data::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete translational_displacement_;
  if (this != internal_default_instance()) delete translational_velocity_;
}

void VF_Data::ArenaDtor(void* object) {
  VF_Data* _this = reinterpret_cast< VF_Data* >(object);
  (void)_this;
}
void VF_Data::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void VF_Data::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const VF_Data& VF_Data::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_VF_Data_vFirmware_5fAPI_2eproto.base);
  return *internal_default_instance();
}


void VF_Data::Clear() {
// @@protoc_insertion_point(message_clear_start:VF_Data)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && translational_displacement_ != nullptr) {
    delete translational_displacement_;
  }
  translational_displacement_ = nullptr;
  if (GetArena() == nullptr && translational_velocity_ != nullptr) {
    delete translational_velocity_;
  }
  translational_velocity_ = nullptr;
  ::memset(&rotational_displacement_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&rotational_velocity_) -
      reinterpret_cast<char*>(&rotational_displacement_)) + sizeof(rotational_velocity_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VF_Data::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .Vec_2D translational_displacement = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_translational_displacement(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Vec_2D translational_velocity = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_translational_velocity(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float rotational_displacement = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          rotational_displacement_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float rotational_velocity = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          rotational_velocity_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* VF_Data::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:VF_Data)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Vec_2D translational_displacement = 1;
  if (this->has_translational_displacement()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::translational_displacement(this), target, stream);
  }

  // .Vec_2D translational_velocity = 2;
  if (this->has_translational_velocity()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::translational_velocity(this), target, stream);
  }

  // float rotational_displacement = 3;
  if (!(this->rotational_displacement() <= 0 && this->rotational_displacement() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_rotational_displacement(), target);
  }

  // float rotational_velocity = 4;
  if (!(this->rotational_velocity() <= 0 && this->rotational_velocity() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_rotational_velocity(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:VF_Data)
  return target;
}

size_t VF_Data::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:VF_Data)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .Vec_2D translational_displacement = 1;
  if (this->has_translational_displacement()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *translational_displacement_);
  }

  // .Vec_2D translational_velocity = 2;
  if (this->has_translational_velocity()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *translational_velocity_);
  }

  // float rotational_displacement = 3;
  if (!(this->rotational_displacement() <= 0 && this->rotational_displacement() >= 0)) {
    total_size += 1 + 4;
  }

  // float rotational_velocity = 4;
  if (!(this->rotational_velocity() <= 0 && this->rotational_velocity() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void VF_Data::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:VF_Data)
  GOOGLE_DCHECK_NE(&from, this);
  const VF_Data* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<VF_Data>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:VF_Data)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:VF_Data)
    MergeFrom(*source);
  }
}

void VF_Data::MergeFrom(const VF_Data& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:VF_Data)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_translational_displacement()) {
    _internal_mutable_translational_displacement()->::Vec_2D::MergeFrom(from._internal_translational_displacement());
  }
  if (from.has_translational_velocity()) {
    _internal_mutable_translational_velocity()->::Vec_2D::MergeFrom(from._internal_translational_velocity());
  }
  if (!(from.rotational_displacement() <= 0 && from.rotational_displacement() >= 0)) {
    _internal_set_rotational_displacement(from._internal_rotational_displacement());
  }
  if (!(from.rotational_velocity() <= 0 && from.rotational_velocity() >= 0)) {
    _internal_set_rotational_velocity(from._internal_rotational_velocity());
  }
}

void VF_Data::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:VF_Data)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VF_Data::CopyFrom(const VF_Data& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:VF_Data)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VF_Data::IsInitialized() const {
  return true;
}

void VF_Data::InternalSwap(VF_Data* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(VF_Data, rotational_velocity_)
      + sizeof(VF_Data::rotational_velocity_)
      - PROTOBUF_FIELD_OFFSET(VF_Data, translational_displacement_)>(
          reinterpret_cast<char*>(&translational_displacement_),
          reinterpret_cast<char*>(&other->translational_displacement_));
}

::PROTOBUF_NAMESPACE_ID::Metadata VF_Data::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::Vec_2D* Arena::CreateMaybeMessage< ::Vec_2D >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Vec_2D >(arena);
}
template<> PROTOBUF_NOINLINE ::VF_Commands* Arena::CreateMaybeMessage< ::VF_Commands >(Arena* arena) {
  return Arena::CreateMessageInternal< ::VF_Commands >(arena);
}
template<> PROTOBUF_NOINLINE ::VF_Data* Arena::CreateMaybeMessage< ::VF_Data >(Arena* arena) {
  return Arena::CreateMessageInternal< ::VF_Data >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
