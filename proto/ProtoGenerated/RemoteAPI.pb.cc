// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: RemoteAPI.proto

#include "RemoteAPI.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_RemoteAPI_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Vec2D_RemoteAPI_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_RemoteAPI_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Vec3D_RemoteAPI_2eproto;
class Vec2DDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Vec2D> _instance;
} _Vec2D_default_instance_;
class Vec3DDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Vec3D> _instance;
} _Vec3D_default_instance_;
class RemoteGeometryDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RemoteGeometry> _instance;
} _RemoteGeometry_default_instance_;
class CommandsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Commands> _instance;
} _Commands_default_instance_;
class RobotInternalDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RobotInternalData> _instance;
} _RobotInternalData_default_instance_;
class VisionDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<VisionData> _instance;
} _VisionData_default_instance_;
static void InitDefaultsscc_info_Commands_RemoteAPI_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_Commands_default_instance_;
    new (ptr) ::Commands();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Commands::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Commands_RemoteAPI_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Commands_RemoteAPI_2eproto}, {
      &scc_info_Vec3D_RemoteAPI_2eproto.base,}};

static void InitDefaultsscc_info_RemoteGeometry_RemoteAPI_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_RemoteGeometry_default_instance_;
    new (ptr) ::RemoteGeometry();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::RemoteGeometry::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RemoteGeometry_RemoteAPI_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_RemoteGeometry_RemoteAPI_2eproto}, {}};

static void InitDefaultsscc_info_RobotInternalData_RemoteAPI_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_RobotInternalData_default_instance_;
    new (ptr) ::RobotInternalData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::RobotInternalData::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_RobotInternalData_RemoteAPI_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_RobotInternalData_RemoteAPI_2eproto}, {
      &scc_info_Vec2D_RemoteAPI_2eproto.base,}};

static void InitDefaultsscc_info_Vec2D_RemoteAPI_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_Vec2D_default_instance_;
    new (ptr) ::Vec2D();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Vec2D::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Vec2D_RemoteAPI_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Vec2D_RemoteAPI_2eproto}, {}};

static void InitDefaultsscc_info_Vec3D_RemoteAPI_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_Vec3D_default_instance_;
    new (ptr) ::Vec3D();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Vec3D::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Vec3D_RemoteAPI_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Vec3D_RemoteAPI_2eproto}, {}};

static void InitDefaultsscc_info_VisionData_RemoteAPI_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_VisionData_default_instance_;
    new (ptr) ::VisionData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::VisionData::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_VisionData_RemoteAPI_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_VisionData_RemoteAPI_2eproto}, {
      &scc_info_Vec2D_RemoteAPI_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_RemoteAPI_2eproto[6];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_RemoteAPI_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_RemoteAPI_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_RemoteAPI_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Vec2D, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Vec2D, x_),
  PROTOBUF_FIELD_OFFSET(::Vec2D, y_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Vec3D, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Vec3D, x_),
  PROTOBUF_FIELD_OFFSET(::Vec3D, y_),
  PROTOBUF_FIELD_OFFSET(::Vec3D, z_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::RemoteGeometry, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::RemoteGeometry, field_length_),
  PROTOBUF_FIELD_OFFSET(::RemoteGeometry, field_width_),
  PROTOBUF_FIELD_OFFSET(::RemoteGeometry, goal_width_),
  PROTOBUF_FIELD_OFFSET(::RemoteGeometry, goal_depth_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Commands, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Commands, enable_ball_auto_capture_),
  PROTOBUF_FIELD_OFFSET(::Commands, mode_),
  PROTOBUF_FIELD_OFFSET(::Commands, is_world_frame_),
  PROTOBUF_FIELD_OFFSET(::Commands, motion_set_point_),
  PROTOBUF_FIELD_OFFSET(::Commands, kicker_set_point_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::RobotInternalData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::RobotInternalData, trans_vel_),
  PROTOBUF_FIELD_OFFSET(::RobotInternalData, trans_disp_),
  PROTOBUF_FIELD_OFFSET(::RobotInternalData, rotat_vel_),
  PROTOBUF_FIELD_OFFSET(::RobotInternalData, rotat_disp_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::VisionData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::VisionData, bot_pos_),
  PROTOBUF_FIELD_OFFSET(::VisionData, bot_vel_),
  PROTOBUF_FIELD_OFFSET(::VisionData, bot_ang_),
  PROTOBUF_FIELD_OFFSET(::VisionData, bot_ang_vel_),
  PROTOBUF_FIELD_OFFSET(::VisionData, ball_pos_),
  PROTOBUF_FIELD_OFFSET(::VisionData, ball_vel_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::Vec2D)},
  { 7, -1, sizeof(::Vec3D)},
  { 15, -1, sizeof(::RemoteGeometry)},
  { 24, -1, sizeof(::Commands)},
  { 34, -1, sizeof(::RobotInternalData)},
  { 43, -1, sizeof(::VisionData)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_Vec2D_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_Vec3D_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_RemoteGeometry_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_Commands_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_RobotInternalData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_VisionData_default_instance_),
};

const char descriptor_table_protodef_RemoteAPI_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\017RemoteAPI.proto\"\035\n\005Vec2D\022\t\n\001x\030\001 \001(\001\022\t\n"
  "\001y\030\002 \001(\001\"(\n\005Vec3D\022\t\n\001x\030\001 \001(\001\022\t\n\001y\030\002 \001(\001\022"
  "\t\n\001z\030\003 \001(\001\"c\n\016RemoteGeometry\022\024\n\014field_le"
  "ngth\030\001 \001(\005\022\023\n\013field_width\030\002 \001(\005\022\022\n\ngoal_"
  "width\030\003 \001(\005\022\022\n\ngoal_depth\030\004 \001(\005\"\226\001\n\010Comm"
  "ands\022 \n\030enable_ball_auto_capture\030\001 \001(\010\022\014"
  "\n\004mode\030\002 \001(\005\022\026\n\016is_world_frame\030\003 \001(\010\022 \n\020"
  "motion_set_point\030\004 \001(\0132\006.Vec3D\022 \n\020kicker"
  "_set_point\030\005 \001(\0132\006.Vec3D\"q\n\021RobotInterna"
  "lData\022\031\n\ttrans_vel\030\001 \001(\0132\006.Vec2D\022\032\n\ntran"
  "s_disp\030\002 \001(\0132\006.Vec2D\022\021\n\trotat_vel\030\003 \001(\001\022"
  "\022\n\nrotat_disp\030\004 \001(\001\"\230\001\n\nVisionData\022\027\n\007bo"
  "t_pos\030\001 \001(\0132\006.Vec2D\022\027\n\007bot_vel\030\002 \001(\0132\006.V"
  "ec2D\022\017\n\007bot_ang\030\003 \001(\001\022\023\n\013bot_ang_vel\030\004 \001"
  "(\001\022\030\n\010ball_pos\030\005 \001(\0132\006.Vec2D\022\030\n\010ball_vel"
  "\030\006 \001(\0132\006.Vec2DB\007\n\005Protob\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_RemoteAPI_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_RemoteAPI_2eproto_sccs[6] = {
  &scc_info_Commands_RemoteAPI_2eproto.base,
  &scc_info_RemoteGeometry_RemoteAPI_2eproto.base,
  &scc_info_RobotInternalData_RemoteAPI_2eproto.base,
  &scc_info_Vec2D_RemoteAPI_2eproto.base,
  &scc_info_Vec3D_RemoteAPI_2eproto.base,
  &scc_info_VisionData_RemoteAPI_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_RemoteAPI_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_RemoteAPI_2eproto = {
  false, false, descriptor_table_protodef_RemoteAPI_2eproto, "RemoteAPI.proto", 631,
  &descriptor_table_RemoteAPI_2eproto_once, descriptor_table_RemoteAPI_2eproto_sccs, descriptor_table_RemoteAPI_2eproto_deps, 6, 0,
  schemas, file_default_instances, TableStruct_RemoteAPI_2eproto::offsets,
  file_level_metadata_RemoteAPI_2eproto, 6, file_level_enum_descriptors_RemoteAPI_2eproto, file_level_service_descriptors_RemoteAPI_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_RemoteAPI_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_RemoteAPI_2eproto)), true);

// ===================================================================

void Vec2D::InitAsDefaultInstance() {
}
class Vec2D::_Internal {
 public:
};

Vec2D::Vec2D(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Vec2D)
}
Vec2D::Vec2D(const Vec2D& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&y_) -
    reinterpret_cast<char*>(&x_)) + sizeof(y_));
  // @@protoc_insertion_point(copy_constructor:Vec2D)
}

void Vec2D::SharedCtor() {
  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&y_) -
      reinterpret_cast<char*>(&x_)) + sizeof(y_));
}

Vec2D::~Vec2D() {
  // @@protoc_insertion_point(destructor:Vec2D)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Vec2D::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Vec2D::ArenaDtor(void* object) {
  Vec2D* _this = reinterpret_cast< Vec2D* >(object);
  (void)_this;
}
void Vec2D::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Vec2D::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Vec2D& Vec2D::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Vec2D_RemoteAPI_2eproto.base);
  return *internal_default_instance();
}


void Vec2D::Clear() {
// @@protoc_insertion_point(message_clear_start:Vec2D)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&y_) -
      reinterpret_cast<char*>(&x_)) + sizeof(y_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Vec2D::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // double x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Vec2D::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Vec2D)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double x = 1;
  if (!(this->x() <= 0 && this->x() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_x(), target);
  }

  // double y = 2;
  if (!(this->y() <= 0 && this->y() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_y(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Vec2D)
  return target;
}

size_t Vec2D::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Vec2D)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double x = 1;
  if (!(this->x() <= 0 && this->x() >= 0)) {
    total_size += 1 + 8;
  }

  // double y = 2;
  if (!(this->y() <= 0 && this->y() >= 0)) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Vec2D::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Vec2D)
  GOOGLE_DCHECK_NE(&from, this);
  const Vec2D* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Vec2D>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Vec2D)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Vec2D)
    MergeFrom(*source);
  }
}

void Vec2D::MergeFrom(const Vec2D& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Vec2D)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.x() <= 0 && from.x() >= 0)) {
    _internal_set_x(from._internal_x());
  }
  if (!(from.y() <= 0 && from.y() >= 0)) {
    _internal_set_y(from._internal_y());
  }
}

void Vec2D::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Vec2D)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Vec2D::CopyFrom(const Vec2D& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Vec2D)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Vec2D::IsInitialized() const {
  return true;
}

void Vec2D::InternalSwap(Vec2D* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Vec2D, y_)
      + sizeof(Vec2D::y_)
      - PROTOBUF_FIELD_OFFSET(Vec2D, x_)>(
          reinterpret_cast<char*>(&x_),
          reinterpret_cast<char*>(&other->x_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Vec2D::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Vec3D::InitAsDefaultInstance() {
}
class Vec3D::_Internal {
 public:
};

Vec3D::Vec3D(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Vec3D)
}
Vec3D::Vec3D(const Vec3D& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&z_) -
    reinterpret_cast<char*>(&x_)) + sizeof(z_));
  // @@protoc_insertion_point(copy_constructor:Vec3D)
}

void Vec3D::SharedCtor() {
  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&z_) -
      reinterpret_cast<char*>(&x_)) + sizeof(z_));
}

Vec3D::~Vec3D() {
  // @@protoc_insertion_point(destructor:Vec3D)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Vec3D::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Vec3D::ArenaDtor(void* object) {
  Vec3D* _this = reinterpret_cast< Vec3D* >(object);
  (void)_this;
}
void Vec3D::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Vec3D::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Vec3D& Vec3D::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Vec3D_RemoteAPI_2eproto.base);
  return *internal_default_instance();
}


void Vec3D::Clear() {
// @@protoc_insertion_point(message_clear_start:Vec3D)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&z_) -
      reinterpret_cast<char*>(&x_)) + sizeof(z_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Vec3D::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // double x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double z = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          z_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Vec3D::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Vec3D)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double x = 1;
  if (!(this->x() <= 0 && this->x() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_x(), target);
  }

  // double y = 2;
  if (!(this->y() <= 0 && this->y() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_y(), target);
  }

  // double z = 3;
  if (!(this->z() <= 0 && this->z() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_z(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Vec3D)
  return target;
}

size_t Vec3D::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Vec3D)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double x = 1;
  if (!(this->x() <= 0 && this->x() >= 0)) {
    total_size += 1 + 8;
  }

  // double y = 2;
  if (!(this->y() <= 0 && this->y() >= 0)) {
    total_size += 1 + 8;
  }

  // double z = 3;
  if (!(this->z() <= 0 && this->z() >= 0)) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Vec3D::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Vec3D)
  GOOGLE_DCHECK_NE(&from, this);
  const Vec3D* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Vec3D>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Vec3D)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Vec3D)
    MergeFrom(*source);
  }
}

void Vec3D::MergeFrom(const Vec3D& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Vec3D)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.x() <= 0 && from.x() >= 0)) {
    _internal_set_x(from._internal_x());
  }
  if (!(from.y() <= 0 && from.y() >= 0)) {
    _internal_set_y(from._internal_y());
  }
  if (!(from.z() <= 0 && from.z() >= 0)) {
    _internal_set_z(from._internal_z());
  }
}

void Vec3D::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Vec3D)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Vec3D::CopyFrom(const Vec3D& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Vec3D)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Vec3D::IsInitialized() const {
  return true;
}

void Vec3D::InternalSwap(Vec3D* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Vec3D, z_)
      + sizeof(Vec3D::z_)
      - PROTOBUF_FIELD_OFFSET(Vec3D, x_)>(
          reinterpret_cast<char*>(&x_),
          reinterpret_cast<char*>(&other->x_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Vec3D::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RemoteGeometry::InitAsDefaultInstance() {
}
class RemoteGeometry::_Internal {
 public:
};

RemoteGeometry::RemoteGeometry(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:RemoteGeometry)
}
RemoteGeometry::RemoteGeometry(const RemoteGeometry& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&field_length_, &from.field_length_,
    static_cast<size_t>(reinterpret_cast<char*>(&goal_depth_) -
    reinterpret_cast<char*>(&field_length_)) + sizeof(goal_depth_));
  // @@protoc_insertion_point(copy_constructor:RemoteGeometry)
}

void RemoteGeometry::SharedCtor() {
  ::memset(&field_length_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&goal_depth_) -
      reinterpret_cast<char*>(&field_length_)) + sizeof(goal_depth_));
}

RemoteGeometry::~RemoteGeometry() {
  // @@protoc_insertion_point(destructor:RemoteGeometry)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RemoteGeometry::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void RemoteGeometry::ArenaDtor(void* object) {
  RemoteGeometry* _this = reinterpret_cast< RemoteGeometry* >(object);
  (void)_this;
}
void RemoteGeometry::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RemoteGeometry::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RemoteGeometry& RemoteGeometry::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RemoteGeometry_RemoteAPI_2eproto.base);
  return *internal_default_instance();
}


void RemoteGeometry::Clear() {
// @@protoc_insertion_point(message_clear_start:RemoteGeometry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&field_length_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&goal_depth_) -
      reinterpret_cast<char*>(&field_length_)) + sizeof(goal_depth_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RemoteGeometry::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 field_length = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          field_length_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 field_width = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          field_width_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 goal_width = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          goal_width_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 goal_depth = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          goal_depth_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RemoteGeometry::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:RemoteGeometry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 field_length = 1;
  if (this->field_length() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_field_length(), target);
  }

  // int32 field_width = 2;
  if (this->field_width() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_field_width(), target);
  }

  // int32 goal_width = 3;
  if (this->goal_width() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_goal_width(), target);
  }

  // int32 goal_depth = 4;
  if (this->goal_depth() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_goal_depth(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RemoteGeometry)
  return target;
}

size_t RemoteGeometry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:RemoteGeometry)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 field_length = 1;
  if (this->field_length() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_field_length());
  }

  // int32 field_width = 2;
  if (this->field_width() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_field_width());
  }

  // int32 goal_width = 3;
  if (this->goal_width() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_goal_width());
  }

  // int32 goal_depth = 4;
  if (this->goal_depth() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_goal_depth());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RemoteGeometry::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:RemoteGeometry)
  GOOGLE_DCHECK_NE(&from, this);
  const RemoteGeometry* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RemoteGeometry>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:RemoteGeometry)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:RemoteGeometry)
    MergeFrom(*source);
  }
}

void RemoteGeometry::MergeFrom(const RemoteGeometry& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:RemoteGeometry)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.field_length() != 0) {
    _internal_set_field_length(from._internal_field_length());
  }
  if (from.field_width() != 0) {
    _internal_set_field_width(from._internal_field_width());
  }
  if (from.goal_width() != 0) {
    _internal_set_goal_width(from._internal_goal_width());
  }
  if (from.goal_depth() != 0) {
    _internal_set_goal_depth(from._internal_goal_depth());
  }
}

void RemoteGeometry::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:RemoteGeometry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RemoteGeometry::CopyFrom(const RemoteGeometry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:RemoteGeometry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RemoteGeometry::IsInitialized() const {
  return true;
}

void RemoteGeometry::InternalSwap(RemoteGeometry* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RemoteGeometry, goal_depth_)
      + sizeof(RemoteGeometry::goal_depth_)
      - PROTOBUF_FIELD_OFFSET(RemoteGeometry, field_length_)>(
          reinterpret_cast<char*>(&field_length_),
          reinterpret_cast<char*>(&other->field_length_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RemoteGeometry::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Commands::InitAsDefaultInstance() {
  ::_Commands_default_instance_._instance.get_mutable()->motion_set_point_ = const_cast< ::Vec3D*>(
      ::Vec3D::internal_default_instance());
  ::_Commands_default_instance_._instance.get_mutable()->kicker_set_point_ = const_cast< ::Vec3D*>(
      ::Vec3D::internal_default_instance());
}
class Commands::_Internal {
 public:
  static const ::Vec3D& motion_set_point(const Commands* msg);
  static const ::Vec3D& kicker_set_point(const Commands* msg);
};

const ::Vec3D&
Commands::_Internal::motion_set_point(const Commands* msg) {
  return *msg->motion_set_point_;
}
const ::Vec3D&
Commands::_Internal::kicker_set_point(const Commands* msg) {
  return *msg->kicker_set_point_;
}
Commands::Commands(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Commands)
}
Commands::Commands(const Commands& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_motion_set_point()) {
    motion_set_point_ = new ::Vec3D(*from.motion_set_point_);
  } else {
    motion_set_point_ = nullptr;
  }
  if (from._internal_has_kicker_set_point()) {
    kicker_set_point_ = new ::Vec3D(*from.kicker_set_point_);
  } else {
    kicker_set_point_ = nullptr;
  }
  ::memcpy(&mode_, &from.mode_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_world_frame_) -
    reinterpret_cast<char*>(&mode_)) + sizeof(is_world_frame_));
  // @@protoc_insertion_point(copy_constructor:Commands)
}

void Commands::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Commands_RemoteAPI_2eproto.base);
  ::memset(&motion_set_point_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_world_frame_) -
      reinterpret_cast<char*>(&motion_set_point_)) + sizeof(is_world_frame_));
}

Commands::~Commands() {
  // @@protoc_insertion_point(destructor:Commands)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Commands::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete motion_set_point_;
  if (this != internal_default_instance()) delete kicker_set_point_;
}

void Commands::ArenaDtor(void* object) {
  Commands* _this = reinterpret_cast< Commands* >(object);
  (void)_this;
}
void Commands::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Commands::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Commands& Commands::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Commands_RemoteAPI_2eproto.base);
  return *internal_default_instance();
}


void Commands::Clear() {
// @@protoc_insertion_point(message_clear_start:Commands)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && motion_set_point_ != nullptr) {
    delete motion_set_point_;
  }
  motion_set_point_ = nullptr;
  if (GetArena() == nullptr && kicker_set_point_ != nullptr) {
    delete kicker_set_point_;
  }
  kicker_set_point_ = nullptr;
  ::memset(&mode_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_world_frame_) -
      reinterpret_cast<char*>(&mode_)) + sizeof(is_world_frame_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Commands::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool enable_ball_auto_capture = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          enable_ball_auto_capture_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 mode = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          mode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool is_world_frame = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          is_world_frame_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Vec3D motion_set_point = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_motion_set_point(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Vec3D kicker_set_point = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_kicker_set_point(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Commands::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Commands)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool enable_ball_auto_capture = 1;
  if (this->enable_ball_auto_capture() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_enable_ball_auto_capture(), target);
  }

  // int32 mode = 2;
  if (this->mode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_mode(), target);
  }

  // bool is_world_frame = 3;
  if (this->is_world_frame() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_is_world_frame(), target);
  }

  // .Vec3D motion_set_point = 4;
  if (this->has_motion_set_point()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::motion_set_point(this), target, stream);
  }

  // .Vec3D kicker_set_point = 5;
  if (this->has_kicker_set_point()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::kicker_set_point(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Commands)
  return target;
}

size_t Commands::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Commands)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .Vec3D motion_set_point = 4;
  if (this->has_motion_set_point()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *motion_set_point_);
  }

  // .Vec3D kicker_set_point = 5;
  if (this->has_kicker_set_point()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *kicker_set_point_);
  }

  // int32 mode = 2;
  if (this->mode() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_mode());
  }

  // bool enable_ball_auto_capture = 1;
  if (this->enable_ball_auto_capture() != 0) {
    total_size += 1 + 1;
  }

  // bool is_world_frame = 3;
  if (this->is_world_frame() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Commands::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Commands)
  GOOGLE_DCHECK_NE(&from, this);
  const Commands* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Commands>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Commands)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Commands)
    MergeFrom(*source);
  }
}

void Commands::MergeFrom(const Commands& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Commands)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_motion_set_point()) {
    _internal_mutable_motion_set_point()->::Vec3D::MergeFrom(from._internal_motion_set_point());
  }
  if (from.has_kicker_set_point()) {
    _internal_mutable_kicker_set_point()->::Vec3D::MergeFrom(from._internal_kicker_set_point());
  }
  if (from.mode() != 0) {
    _internal_set_mode(from._internal_mode());
  }
  if (from.enable_ball_auto_capture() != 0) {
    _internal_set_enable_ball_auto_capture(from._internal_enable_ball_auto_capture());
  }
  if (from.is_world_frame() != 0) {
    _internal_set_is_world_frame(from._internal_is_world_frame());
  }
}

void Commands::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Commands)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Commands::CopyFrom(const Commands& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Commands)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Commands::IsInitialized() const {
  return true;
}

void Commands::InternalSwap(Commands* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Commands, is_world_frame_)
      + sizeof(Commands::is_world_frame_)
      - PROTOBUF_FIELD_OFFSET(Commands, motion_set_point_)>(
          reinterpret_cast<char*>(&motion_set_point_),
          reinterpret_cast<char*>(&other->motion_set_point_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Commands::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RobotInternalData::InitAsDefaultInstance() {
  ::_RobotInternalData_default_instance_._instance.get_mutable()->trans_vel_ = const_cast< ::Vec2D*>(
      ::Vec2D::internal_default_instance());
  ::_RobotInternalData_default_instance_._instance.get_mutable()->trans_disp_ = const_cast< ::Vec2D*>(
      ::Vec2D::internal_default_instance());
}
class RobotInternalData::_Internal {
 public:
  static const ::Vec2D& trans_vel(const RobotInternalData* msg);
  static const ::Vec2D& trans_disp(const RobotInternalData* msg);
};

const ::Vec2D&
RobotInternalData::_Internal::trans_vel(const RobotInternalData* msg) {
  return *msg->trans_vel_;
}
const ::Vec2D&
RobotInternalData::_Internal::trans_disp(const RobotInternalData* msg) {
  return *msg->trans_disp_;
}
RobotInternalData::RobotInternalData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:RobotInternalData)
}
RobotInternalData::RobotInternalData(const RobotInternalData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_trans_vel()) {
    trans_vel_ = new ::Vec2D(*from.trans_vel_);
  } else {
    trans_vel_ = nullptr;
  }
  if (from._internal_has_trans_disp()) {
    trans_disp_ = new ::Vec2D(*from.trans_disp_);
  } else {
    trans_disp_ = nullptr;
  }
  ::memcpy(&rotat_vel_, &from.rotat_vel_,
    static_cast<size_t>(reinterpret_cast<char*>(&rotat_disp_) -
    reinterpret_cast<char*>(&rotat_vel_)) + sizeof(rotat_disp_));
  // @@protoc_insertion_point(copy_constructor:RobotInternalData)
}

void RobotInternalData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RobotInternalData_RemoteAPI_2eproto.base);
  ::memset(&trans_vel_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&rotat_disp_) -
      reinterpret_cast<char*>(&trans_vel_)) + sizeof(rotat_disp_));
}

RobotInternalData::~RobotInternalData() {
  // @@protoc_insertion_point(destructor:RobotInternalData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RobotInternalData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete trans_vel_;
  if (this != internal_default_instance()) delete trans_disp_;
}

void RobotInternalData::ArenaDtor(void* object) {
  RobotInternalData* _this = reinterpret_cast< RobotInternalData* >(object);
  (void)_this;
}
void RobotInternalData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RobotInternalData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RobotInternalData& RobotInternalData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RobotInternalData_RemoteAPI_2eproto.base);
  return *internal_default_instance();
}


void RobotInternalData::Clear() {
// @@protoc_insertion_point(message_clear_start:RobotInternalData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && trans_vel_ != nullptr) {
    delete trans_vel_;
  }
  trans_vel_ = nullptr;
  if (GetArena() == nullptr && trans_disp_ != nullptr) {
    delete trans_disp_;
  }
  trans_disp_ = nullptr;
  ::memset(&rotat_vel_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&rotat_disp_) -
      reinterpret_cast<char*>(&rotat_vel_)) + sizeof(rotat_disp_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RobotInternalData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .Vec2D trans_vel = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_trans_vel(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Vec2D trans_disp = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_trans_disp(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double rotat_vel = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          rotat_vel_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double rotat_disp = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          rotat_disp_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RobotInternalData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:RobotInternalData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Vec2D trans_vel = 1;
  if (this->has_trans_vel()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::trans_vel(this), target, stream);
  }

  // .Vec2D trans_disp = 2;
  if (this->has_trans_disp()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::trans_disp(this), target, stream);
  }

  // double rotat_vel = 3;
  if (!(this->rotat_vel() <= 0 && this->rotat_vel() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_rotat_vel(), target);
  }

  // double rotat_disp = 4;
  if (!(this->rotat_disp() <= 0 && this->rotat_disp() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_rotat_disp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RobotInternalData)
  return target;
}

size_t RobotInternalData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:RobotInternalData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .Vec2D trans_vel = 1;
  if (this->has_trans_vel()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *trans_vel_);
  }

  // .Vec2D trans_disp = 2;
  if (this->has_trans_disp()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *trans_disp_);
  }

  // double rotat_vel = 3;
  if (!(this->rotat_vel() <= 0 && this->rotat_vel() >= 0)) {
    total_size += 1 + 8;
  }

  // double rotat_disp = 4;
  if (!(this->rotat_disp() <= 0 && this->rotat_disp() >= 0)) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RobotInternalData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:RobotInternalData)
  GOOGLE_DCHECK_NE(&from, this);
  const RobotInternalData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RobotInternalData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:RobotInternalData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:RobotInternalData)
    MergeFrom(*source);
  }
}

void RobotInternalData::MergeFrom(const RobotInternalData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:RobotInternalData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_trans_vel()) {
    _internal_mutable_trans_vel()->::Vec2D::MergeFrom(from._internal_trans_vel());
  }
  if (from.has_trans_disp()) {
    _internal_mutable_trans_disp()->::Vec2D::MergeFrom(from._internal_trans_disp());
  }
  if (!(from.rotat_vel() <= 0 && from.rotat_vel() >= 0)) {
    _internal_set_rotat_vel(from._internal_rotat_vel());
  }
  if (!(from.rotat_disp() <= 0 && from.rotat_disp() >= 0)) {
    _internal_set_rotat_disp(from._internal_rotat_disp());
  }
}

void RobotInternalData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:RobotInternalData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RobotInternalData::CopyFrom(const RobotInternalData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:RobotInternalData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RobotInternalData::IsInitialized() const {
  return true;
}

void RobotInternalData::InternalSwap(RobotInternalData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RobotInternalData, rotat_disp_)
      + sizeof(RobotInternalData::rotat_disp_)
      - PROTOBUF_FIELD_OFFSET(RobotInternalData, trans_vel_)>(
          reinterpret_cast<char*>(&trans_vel_),
          reinterpret_cast<char*>(&other->trans_vel_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RobotInternalData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void VisionData::InitAsDefaultInstance() {
  ::_VisionData_default_instance_._instance.get_mutable()->bot_pos_ = const_cast< ::Vec2D*>(
      ::Vec2D::internal_default_instance());
  ::_VisionData_default_instance_._instance.get_mutable()->bot_vel_ = const_cast< ::Vec2D*>(
      ::Vec2D::internal_default_instance());
  ::_VisionData_default_instance_._instance.get_mutable()->ball_pos_ = const_cast< ::Vec2D*>(
      ::Vec2D::internal_default_instance());
  ::_VisionData_default_instance_._instance.get_mutable()->ball_vel_ = const_cast< ::Vec2D*>(
      ::Vec2D::internal_default_instance());
}
class VisionData::_Internal {
 public:
  static const ::Vec2D& bot_pos(const VisionData* msg);
  static const ::Vec2D& bot_vel(const VisionData* msg);
  static const ::Vec2D& ball_pos(const VisionData* msg);
  static const ::Vec2D& ball_vel(const VisionData* msg);
};

const ::Vec2D&
VisionData::_Internal::bot_pos(const VisionData* msg) {
  return *msg->bot_pos_;
}
const ::Vec2D&
VisionData::_Internal::bot_vel(const VisionData* msg) {
  return *msg->bot_vel_;
}
const ::Vec2D&
VisionData::_Internal::ball_pos(const VisionData* msg) {
  return *msg->ball_pos_;
}
const ::Vec2D&
VisionData::_Internal::ball_vel(const VisionData* msg) {
  return *msg->ball_vel_;
}
VisionData::VisionData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:VisionData)
}
VisionData::VisionData(const VisionData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_bot_pos()) {
    bot_pos_ = new ::Vec2D(*from.bot_pos_);
  } else {
    bot_pos_ = nullptr;
  }
  if (from._internal_has_bot_vel()) {
    bot_vel_ = new ::Vec2D(*from.bot_vel_);
  } else {
    bot_vel_ = nullptr;
  }
  if (from._internal_has_ball_pos()) {
    ball_pos_ = new ::Vec2D(*from.ball_pos_);
  } else {
    ball_pos_ = nullptr;
  }
  if (from._internal_has_ball_vel()) {
    ball_vel_ = new ::Vec2D(*from.ball_vel_);
  } else {
    ball_vel_ = nullptr;
  }
  ::memcpy(&bot_ang_, &from.bot_ang_,
    static_cast<size_t>(reinterpret_cast<char*>(&bot_ang_vel_) -
    reinterpret_cast<char*>(&bot_ang_)) + sizeof(bot_ang_vel_));
  // @@protoc_insertion_point(copy_constructor:VisionData)
}

void VisionData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_VisionData_RemoteAPI_2eproto.base);
  ::memset(&bot_pos_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&bot_ang_vel_) -
      reinterpret_cast<char*>(&bot_pos_)) + sizeof(bot_ang_vel_));
}

VisionData::~VisionData() {
  // @@protoc_insertion_point(destructor:VisionData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void VisionData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete bot_pos_;
  if (this != internal_default_instance()) delete bot_vel_;
  if (this != internal_default_instance()) delete ball_pos_;
  if (this != internal_default_instance()) delete ball_vel_;
}

void VisionData::ArenaDtor(void* object) {
  VisionData* _this = reinterpret_cast< VisionData* >(object);
  (void)_this;
}
void VisionData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void VisionData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const VisionData& VisionData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_VisionData_RemoteAPI_2eproto.base);
  return *internal_default_instance();
}


void VisionData::Clear() {
// @@protoc_insertion_point(message_clear_start:VisionData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && bot_pos_ != nullptr) {
    delete bot_pos_;
  }
  bot_pos_ = nullptr;
  if (GetArena() == nullptr && bot_vel_ != nullptr) {
    delete bot_vel_;
  }
  bot_vel_ = nullptr;
  if (GetArena() == nullptr && ball_pos_ != nullptr) {
    delete ball_pos_;
  }
  ball_pos_ = nullptr;
  if (GetArena() == nullptr && ball_vel_ != nullptr) {
    delete ball_vel_;
  }
  ball_vel_ = nullptr;
  ::memset(&bot_ang_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&bot_ang_vel_) -
      reinterpret_cast<char*>(&bot_ang_)) + sizeof(bot_ang_vel_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VisionData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .Vec2D bot_pos = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_bot_pos(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Vec2D bot_vel = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_bot_vel(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double bot_ang = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          bot_ang_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double bot_ang_vel = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          bot_ang_vel_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // .Vec2D ball_pos = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_ball_pos(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Vec2D ball_vel = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_ball_vel(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* VisionData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:VisionData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Vec2D bot_pos = 1;
  if (this->has_bot_pos()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::bot_pos(this), target, stream);
  }

  // .Vec2D bot_vel = 2;
  if (this->has_bot_vel()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::bot_vel(this), target, stream);
  }

  // double bot_ang = 3;
  if (!(this->bot_ang() <= 0 && this->bot_ang() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_bot_ang(), target);
  }

  // double bot_ang_vel = 4;
  if (!(this->bot_ang_vel() <= 0 && this->bot_ang_vel() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_bot_ang_vel(), target);
  }

  // .Vec2D ball_pos = 5;
  if (this->has_ball_pos()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::ball_pos(this), target, stream);
  }

  // .Vec2D ball_vel = 6;
  if (this->has_ball_vel()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::ball_vel(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:VisionData)
  return target;
}

size_t VisionData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:VisionData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .Vec2D bot_pos = 1;
  if (this->has_bot_pos()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *bot_pos_);
  }

  // .Vec2D bot_vel = 2;
  if (this->has_bot_vel()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *bot_vel_);
  }

  // .Vec2D ball_pos = 5;
  if (this->has_ball_pos()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *ball_pos_);
  }

  // .Vec2D ball_vel = 6;
  if (this->has_ball_vel()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *ball_vel_);
  }

  // double bot_ang = 3;
  if (!(this->bot_ang() <= 0 && this->bot_ang() >= 0)) {
    total_size += 1 + 8;
  }

  // double bot_ang_vel = 4;
  if (!(this->bot_ang_vel() <= 0 && this->bot_ang_vel() >= 0)) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void VisionData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:VisionData)
  GOOGLE_DCHECK_NE(&from, this);
  const VisionData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<VisionData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:VisionData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:VisionData)
    MergeFrom(*source);
  }
}

void VisionData::MergeFrom(const VisionData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:VisionData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_bot_pos()) {
    _internal_mutable_bot_pos()->::Vec2D::MergeFrom(from._internal_bot_pos());
  }
  if (from.has_bot_vel()) {
    _internal_mutable_bot_vel()->::Vec2D::MergeFrom(from._internal_bot_vel());
  }
  if (from.has_ball_pos()) {
    _internal_mutable_ball_pos()->::Vec2D::MergeFrom(from._internal_ball_pos());
  }
  if (from.has_ball_vel()) {
    _internal_mutable_ball_vel()->::Vec2D::MergeFrom(from._internal_ball_vel());
  }
  if (!(from.bot_ang() <= 0 && from.bot_ang() >= 0)) {
    _internal_set_bot_ang(from._internal_bot_ang());
  }
  if (!(from.bot_ang_vel() <= 0 && from.bot_ang_vel() >= 0)) {
    _internal_set_bot_ang_vel(from._internal_bot_ang_vel());
  }
}

void VisionData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:VisionData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VisionData::CopyFrom(const VisionData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:VisionData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VisionData::IsInitialized() const {
  return true;
}

void VisionData::InternalSwap(VisionData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(VisionData, bot_ang_vel_)
      + sizeof(VisionData::bot_ang_vel_)
      - PROTOBUF_FIELD_OFFSET(VisionData, bot_pos_)>(
          reinterpret_cast<char*>(&bot_pos_),
          reinterpret_cast<char*>(&other->bot_pos_));
}

::PROTOBUF_NAMESPACE_ID::Metadata VisionData::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::Vec2D* Arena::CreateMaybeMessage< ::Vec2D >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Vec2D >(arena);
}
template<> PROTOBUF_NOINLINE ::Vec3D* Arena::CreateMaybeMessage< ::Vec3D >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Vec3D >(arena);
}
template<> PROTOBUF_NOINLINE ::RemoteGeometry* Arena::CreateMaybeMessage< ::RemoteGeometry >(Arena* arena) {
  return Arena::CreateMessageInternal< ::RemoteGeometry >(arena);
}
template<> PROTOBUF_NOINLINE ::Commands* Arena::CreateMaybeMessage< ::Commands >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Commands >(arena);
}
template<> PROTOBUF_NOINLINE ::RobotInternalData* Arena::CreateMaybeMessage< ::RobotInternalData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::RobotInternalData >(arena);
}
template<> PROTOBUF_NOINLINE ::VisionData* Arena::CreateMaybeMessage< ::VisionData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::VisionData >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
