// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: vFirmware_API.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_vFirmware_5fAPI_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_vFirmware_5fAPI_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_vFirmware_5fAPI_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_vFirmware_5fAPI_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_vFirmware_5fAPI_2eproto;
class VF_Commands;
class VF_CommandsDefaultTypeInternal;
extern VF_CommandsDefaultTypeInternal _VF_Commands_default_instance_;
class VF_Data;
class VF_DataDefaultTypeInternal;
extern VF_DataDefaultTypeInternal _VF_Data_default_instance_;
class Vec_2D;
class Vec_2DDefaultTypeInternal;
extern Vec_2DDefaultTypeInternal _Vec_2D_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::VF_Commands* Arena::CreateMaybeMessage<::VF_Commands>(Arena*);
template<> ::VF_Data* Arena::CreateMaybeMessage<::VF_Data>(Arena*);
template<> ::Vec_2D* Arena::CreateMaybeMessage<::Vec_2D>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

// ===================================================================

class Vec_2D PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Vec_2D) */ {
 public:
  inline Vec_2D() : Vec_2D(nullptr) {};
  virtual ~Vec_2D();

  Vec_2D(const Vec_2D& from);
  Vec_2D(Vec_2D&& from) noexcept
    : Vec_2D() {
    *this = ::std::move(from);
  }

  inline Vec_2D& operator=(const Vec_2D& from) {
    CopyFrom(from);
    return *this;
  }
  inline Vec_2D& operator=(Vec_2D&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Vec_2D& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Vec_2D* internal_default_instance() {
    return reinterpret_cast<const Vec_2D*>(
               &_Vec_2D_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Vec_2D& a, Vec_2D& b) {
    a.Swap(&b);
  }
  inline void Swap(Vec_2D* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Vec_2D* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Vec_2D* New() const final {
    return CreateMaybeMessage<Vec_2D>(nullptr);
  }

  Vec_2D* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Vec_2D>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Vec_2D& from);
  void MergeFrom(const Vec_2D& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Vec_2D* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Vec_2D";
  }
  protected:
  explicit Vec_2D(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_vFirmware_5fAPI_2eproto);
    return ::descriptor_table_vFirmware_5fAPI_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
  };
  // float x = 1;
  void clear_x();
  float x() const;
  void set_x(float value);
  private:
  float _internal_x() const;
  void _internal_set_x(float value);
  public:

  // float y = 2;
  void clear_y();
  float y() const;
  void set_y(float value);
  private:
  float _internal_y() const;
  void _internal_set_y(float value);
  public:

  // @@protoc_insertion_point(class_scope:Vec_2D)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  float x_;
  float y_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_vFirmware_5fAPI_2eproto;
};
// -------------------------------------------------------------------

class VF_Commands PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:VF_Commands) */ {
 public:
  inline VF_Commands() : VF_Commands(nullptr) {};
  virtual ~VF_Commands();

  VF_Commands(const VF_Commands& from);
  VF_Commands(VF_Commands&& from) noexcept
    : VF_Commands() {
    *this = ::std::move(from);
  }

  inline VF_Commands& operator=(const VF_Commands& from) {
    CopyFrom(from);
    return *this;
  }
  inline VF_Commands& operator=(VF_Commands&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const VF_Commands& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const VF_Commands* internal_default_instance() {
    return reinterpret_cast<const VF_Commands*>(
               &_VF_Commands_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(VF_Commands& a, VF_Commands& b) {
    a.Swap(&b);
  }
  inline void Swap(VF_Commands* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VF_Commands* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline VF_Commands* New() const final {
    return CreateMaybeMessage<VF_Commands>(nullptr);
  }

  VF_Commands* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<VF_Commands>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const VF_Commands& from);
  void MergeFrom(const VF_Commands& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VF_Commands* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "VF_Commands";
  }
  protected:
  explicit VF_Commands(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_vFirmware_5fAPI_2eproto);
    return ::descriptor_table_vFirmware_5fAPI_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTranslationalOutputFieldNumber = 2,
    kKickerFieldNumber = 4,
    kRotationalOutputFieldNumber = 3,
    kInitFieldNumber = 1,
    kDribblerFieldNumber = 5,
  };
  // .Vec_2D translational_output = 2;
  bool has_translational_output() const;
  private:
  bool _internal_has_translational_output() const;
  public:
  void clear_translational_output();
  const ::Vec_2D& translational_output() const;
  ::Vec_2D* release_translational_output();
  ::Vec_2D* mutable_translational_output();
  void set_allocated_translational_output(::Vec_2D* translational_output);
  private:
  const ::Vec_2D& _internal_translational_output() const;
  ::Vec_2D* _internal_mutable_translational_output();
  public:
  void unsafe_arena_set_allocated_translational_output(
      ::Vec_2D* translational_output);
  ::Vec_2D* unsafe_arena_release_translational_output();

  // .Vec_2D kicker = 4;
  bool has_kicker() const;
  private:
  bool _internal_has_kicker() const;
  public:
  void clear_kicker();
  const ::Vec_2D& kicker() const;
  ::Vec_2D* release_kicker();
  ::Vec_2D* mutable_kicker();
  void set_allocated_kicker(::Vec_2D* kicker);
  private:
  const ::Vec_2D& _internal_kicker() const;
  ::Vec_2D* _internal_mutable_kicker();
  public:
  void unsafe_arena_set_allocated_kicker(
      ::Vec_2D* kicker);
  ::Vec_2D* unsafe_arena_release_kicker();

  // float rotational_output = 3;
  void clear_rotational_output();
  float rotational_output() const;
  void set_rotational_output(float value);
  private:
  float _internal_rotational_output() const;
  void _internal_set_rotational_output(float value);
  public:

  // bool init = 1;
  void clear_init();
  bool init() const;
  void set_init(bool value);
  private:
  bool _internal_init() const;
  void _internal_set_init(bool value);
  public:

  // bool dribbler = 5;
  void clear_dribbler();
  bool dribbler() const;
  void set_dribbler(bool value);
  private:
  bool _internal_dribbler() const;
  void _internal_set_dribbler(bool value);
  public:

  // @@protoc_insertion_point(class_scope:VF_Commands)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::Vec_2D* translational_output_;
  ::Vec_2D* kicker_;
  float rotational_output_;
  bool init_;
  bool dribbler_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_vFirmware_5fAPI_2eproto;
};
// -------------------------------------------------------------------

class VF_Data PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:VF_Data) */ {
 public:
  inline VF_Data() : VF_Data(nullptr) {};
  virtual ~VF_Data();

  VF_Data(const VF_Data& from);
  VF_Data(VF_Data&& from) noexcept
    : VF_Data() {
    *this = ::std::move(from);
  }

  inline VF_Data& operator=(const VF_Data& from) {
    CopyFrom(from);
    return *this;
  }
  inline VF_Data& operator=(VF_Data&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const VF_Data& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const VF_Data* internal_default_instance() {
    return reinterpret_cast<const VF_Data*>(
               &_VF_Data_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(VF_Data& a, VF_Data& b) {
    a.Swap(&b);
  }
  inline void Swap(VF_Data* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VF_Data* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline VF_Data* New() const final {
    return CreateMaybeMessage<VF_Data>(nullptr);
  }

  VF_Data* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<VF_Data>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const VF_Data& from);
  void MergeFrom(const VF_Data& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VF_Data* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "VF_Data";
  }
  protected:
  explicit VF_Data(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_vFirmware_5fAPI_2eproto);
    return ::descriptor_table_vFirmware_5fAPI_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTranslationalDisplacementFieldNumber = 1,
    kTranslationalVelocityFieldNumber = 2,
    kRotationalDisplacementFieldNumber = 3,
    kRotationalVelocityFieldNumber = 4,
  };
  // .Vec_2D translational_displacement = 1;
  bool has_translational_displacement() const;
  private:
  bool _internal_has_translational_displacement() const;
  public:
  void clear_translational_displacement();
  const ::Vec_2D& translational_displacement() const;
  ::Vec_2D* release_translational_displacement();
  ::Vec_2D* mutable_translational_displacement();
  void set_allocated_translational_displacement(::Vec_2D* translational_displacement);
  private:
  const ::Vec_2D& _internal_translational_displacement() const;
  ::Vec_2D* _internal_mutable_translational_displacement();
  public:
  void unsafe_arena_set_allocated_translational_displacement(
      ::Vec_2D* translational_displacement);
  ::Vec_2D* unsafe_arena_release_translational_displacement();

  // .Vec_2D translational_velocity = 2;
  bool has_translational_velocity() const;
  private:
  bool _internal_has_translational_velocity() const;
  public:
  void clear_translational_velocity();
  const ::Vec_2D& translational_velocity() const;
  ::Vec_2D* release_translational_velocity();
  ::Vec_2D* mutable_translational_velocity();
  void set_allocated_translational_velocity(::Vec_2D* translational_velocity);
  private:
  const ::Vec_2D& _internal_translational_velocity() const;
  ::Vec_2D* _internal_mutable_translational_velocity();
  public:
  void unsafe_arena_set_allocated_translational_velocity(
      ::Vec_2D* translational_velocity);
  ::Vec_2D* unsafe_arena_release_translational_velocity();

  // float rotational_displacement = 3;
  void clear_rotational_displacement();
  float rotational_displacement() const;
  void set_rotational_displacement(float value);
  private:
  float _internal_rotational_displacement() const;
  void _internal_set_rotational_displacement(float value);
  public:

  // float rotational_velocity = 4;
  void clear_rotational_velocity();
  float rotational_velocity() const;
  void set_rotational_velocity(float value);
  private:
  float _internal_rotational_velocity() const;
  void _internal_set_rotational_velocity(float value);
  public:

  // @@protoc_insertion_point(class_scope:VF_Data)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::Vec_2D* translational_displacement_;
  ::Vec_2D* translational_velocity_;
  float rotational_displacement_;
  float rotational_velocity_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_vFirmware_5fAPI_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Vec_2D

// float x = 1;
inline void Vec_2D::clear_x() {
  x_ = 0;
}
inline float Vec_2D::_internal_x() const {
  return x_;
}
inline float Vec_2D::x() const {
  // @@protoc_insertion_point(field_get:Vec_2D.x)
  return _internal_x();
}
inline void Vec_2D::_internal_set_x(float value) {
  
  x_ = value;
}
inline void Vec_2D::set_x(float value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:Vec_2D.x)
}

// float y = 2;
inline void Vec_2D::clear_y() {
  y_ = 0;
}
inline float Vec_2D::_internal_y() const {
  return y_;
}
inline float Vec_2D::y() const {
  // @@protoc_insertion_point(field_get:Vec_2D.y)
  return _internal_y();
}
inline void Vec_2D::_internal_set_y(float value) {
  
  y_ = value;
}
inline void Vec_2D::set_y(float value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:Vec_2D.y)
}

// -------------------------------------------------------------------

// VF_Commands

// bool init = 1;
inline void VF_Commands::clear_init() {
  init_ = false;
}
inline bool VF_Commands::_internal_init() const {
  return init_;
}
inline bool VF_Commands::init() const {
  // @@protoc_insertion_point(field_get:VF_Commands.init)
  return _internal_init();
}
inline void VF_Commands::_internal_set_init(bool value) {
  
  init_ = value;
}
inline void VF_Commands::set_init(bool value) {
  _internal_set_init(value);
  // @@protoc_insertion_point(field_set:VF_Commands.init)
}

// .Vec_2D translational_output = 2;
inline bool VF_Commands::_internal_has_translational_output() const {
  return this != internal_default_instance() && translational_output_ != nullptr;
}
inline bool VF_Commands::has_translational_output() const {
  return _internal_has_translational_output();
}
inline void VF_Commands::clear_translational_output() {
  if (GetArena() == nullptr && translational_output_ != nullptr) {
    delete translational_output_;
  }
  translational_output_ = nullptr;
}
inline const ::Vec_2D& VF_Commands::_internal_translational_output() const {
  const ::Vec_2D* p = translational_output_;
  return p != nullptr ? *p : *reinterpret_cast<const ::Vec_2D*>(
      &::_Vec_2D_default_instance_);
}
inline const ::Vec_2D& VF_Commands::translational_output() const {
  // @@protoc_insertion_point(field_get:VF_Commands.translational_output)
  return _internal_translational_output();
}
inline void VF_Commands::unsafe_arena_set_allocated_translational_output(
    ::Vec_2D* translational_output) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(translational_output_);
  }
  translational_output_ = translational_output;
  if (translational_output) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:VF_Commands.translational_output)
}
inline ::Vec_2D* VF_Commands::release_translational_output() {
  auto temp = unsafe_arena_release_translational_output();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Vec_2D* VF_Commands::unsafe_arena_release_translational_output() {
  // @@protoc_insertion_point(field_release:VF_Commands.translational_output)
  
  ::Vec_2D* temp = translational_output_;
  translational_output_ = nullptr;
  return temp;
}
inline ::Vec_2D* VF_Commands::_internal_mutable_translational_output() {
  
  if (translational_output_ == nullptr) {
    auto* p = CreateMaybeMessage<::Vec_2D>(GetArena());
    translational_output_ = p;
  }
  return translational_output_;
}
inline ::Vec_2D* VF_Commands::mutable_translational_output() {
  // @@protoc_insertion_point(field_mutable:VF_Commands.translational_output)
  return _internal_mutable_translational_output();
}
inline void VF_Commands::set_allocated_translational_output(::Vec_2D* translational_output) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete translational_output_;
  }
  if (translational_output) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(translational_output);
    if (message_arena != submessage_arena) {
      translational_output = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, translational_output, submessage_arena);
    }
    
  } else {
    
  }
  translational_output_ = translational_output;
  // @@protoc_insertion_point(field_set_allocated:VF_Commands.translational_output)
}

// float rotational_output = 3;
inline void VF_Commands::clear_rotational_output() {
  rotational_output_ = 0;
}
inline float VF_Commands::_internal_rotational_output() const {
  return rotational_output_;
}
inline float VF_Commands::rotational_output() const {
  // @@protoc_insertion_point(field_get:VF_Commands.rotational_output)
  return _internal_rotational_output();
}
inline void VF_Commands::_internal_set_rotational_output(float value) {
  
  rotational_output_ = value;
}
inline void VF_Commands::set_rotational_output(float value) {
  _internal_set_rotational_output(value);
  // @@protoc_insertion_point(field_set:VF_Commands.rotational_output)
}

// .Vec_2D kicker = 4;
inline bool VF_Commands::_internal_has_kicker() const {
  return this != internal_default_instance() && kicker_ != nullptr;
}
inline bool VF_Commands::has_kicker() const {
  return _internal_has_kicker();
}
inline void VF_Commands::clear_kicker() {
  if (GetArena() == nullptr && kicker_ != nullptr) {
    delete kicker_;
  }
  kicker_ = nullptr;
}
inline const ::Vec_2D& VF_Commands::_internal_kicker() const {
  const ::Vec_2D* p = kicker_;
  return p != nullptr ? *p : *reinterpret_cast<const ::Vec_2D*>(
      &::_Vec_2D_default_instance_);
}
inline const ::Vec_2D& VF_Commands::kicker() const {
  // @@protoc_insertion_point(field_get:VF_Commands.kicker)
  return _internal_kicker();
}
inline void VF_Commands::unsafe_arena_set_allocated_kicker(
    ::Vec_2D* kicker) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(kicker_);
  }
  kicker_ = kicker;
  if (kicker) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:VF_Commands.kicker)
}
inline ::Vec_2D* VF_Commands::release_kicker() {
  auto temp = unsafe_arena_release_kicker();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Vec_2D* VF_Commands::unsafe_arena_release_kicker() {
  // @@protoc_insertion_point(field_release:VF_Commands.kicker)
  
  ::Vec_2D* temp = kicker_;
  kicker_ = nullptr;
  return temp;
}
inline ::Vec_2D* VF_Commands::_internal_mutable_kicker() {
  
  if (kicker_ == nullptr) {
    auto* p = CreateMaybeMessage<::Vec_2D>(GetArena());
    kicker_ = p;
  }
  return kicker_;
}
inline ::Vec_2D* VF_Commands::mutable_kicker() {
  // @@protoc_insertion_point(field_mutable:VF_Commands.kicker)
  return _internal_mutable_kicker();
}
inline void VF_Commands::set_allocated_kicker(::Vec_2D* kicker) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete kicker_;
  }
  if (kicker) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(kicker);
    if (message_arena != submessage_arena) {
      kicker = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, kicker, submessage_arena);
    }
    
  } else {
    
  }
  kicker_ = kicker;
  // @@protoc_insertion_point(field_set_allocated:VF_Commands.kicker)
}

// bool dribbler = 5;
inline void VF_Commands::clear_dribbler() {
  dribbler_ = false;
}
inline bool VF_Commands::_internal_dribbler() const {
  return dribbler_;
}
inline bool VF_Commands::dribbler() const {
  // @@protoc_insertion_point(field_get:VF_Commands.dribbler)
  return _internal_dribbler();
}
inline void VF_Commands::_internal_set_dribbler(bool value) {
  
  dribbler_ = value;
}
inline void VF_Commands::set_dribbler(bool value) {
  _internal_set_dribbler(value);
  // @@protoc_insertion_point(field_set:VF_Commands.dribbler)
}

// -------------------------------------------------------------------

// VF_Data

// .Vec_2D translational_displacement = 1;
inline bool VF_Data::_internal_has_translational_displacement() const {
  return this != internal_default_instance() && translational_displacement_ != nullptr;
}
inline bool VF_Data::has_translational_displacement() const {
  return _internal_has_translational_displacement();
}
inline void VF_Data::clear_translational_displacement() {
  if (GetArena() == nullptr && translational_displacement_ != nullptr) {
    delete translational_displacement_;
  }
  translational_displacement_ = nullptr;
}
inline const ::Vec_2D& VF_Data::_internal_translational_displacement() const {
  const ::Vec_2D* p = translational_displacement_;
  return p != nullptr ? *p : *reinterpret_cast<const ::Vec_2D*>(
      &::_Vec_2D_default_instance_);
}
inline const ::Vec_2D& VF_Data::translational_displacement() const {
  // @@protoc_insertion_point(field_get:VF_Data.translational_displacement)
  return _internal_translational_displacement();
}
inline void VF_Data::unsafe_arena_set_allocated_translational_displacement(
    ::Vec_2D* translational_displacement) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(translational_displacement_);
  }
  translational_displacement_ = translational_displacement;
  if (translational_displacement) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:VF_Data.translational_displacement)
}
inline ::Vec_2D* VF_Data::release_translational_displacement() {
  auto temp = unsafe_arena_release_translational_displacement();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Vec_2D* VF_Data::unsafe_arena_release_translational_displacement() {
  // @@protoc_insertion_point(field_release:VF_Data.translational_displacement)
  
  ::Vec_2D* temp = translational_displacement_;
  translational_displacement_ = nullptr;
  return temp;
}
inline ::Vec_2D* VF_Data::_internal_mutable_translational_displacement() {
  
  if (translational_displacement_ == nullptr) {
    auto* p = CreateMaybeMessage<::Vec_2D>(GetArena());
    translational_displacement_ = p;
  }
  return translational_displacement_;
}
inline ::Vec_2D* VF_Data::mutable_translational_displacement() {
  // @@protoc_insertion_point(field_mutable:VF_Data.translational_displacement)
  return _internal_mutable_translational_displacement();
}
inline void VF_Data::set_allocated_translational_displacement(::Vec_2D* translational_displacement) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete translational_displacement_;
  }
  if (translational_displacement) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(translational_displacement);
    if (message_arena != submessage_arena) {
      translational_displacement = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, translational_displacement, submessage_arena);
    }
    
  } else {
    
  }
  translational_displacement_ = translational_displacement;
  // @@protoc_insertion_point(field_set_allocated:VF_Data.translational_displacement)
}

// .Vec_2D translational_velocity = 2;
inline bool VF_Data::_internal_has_translational_velocity() const {
  return this != internal_default_instance() && translational_velocity_ != nullptr;
}
inline bool VF_Data::has_translational_velocity() const {
  return _internal_has_translational_velocity();
}
inline void VF_Data::clear_translational_velocity() {
  if (GetArena() == nullptr && translational_velocity_ != nullptr) {
    delete translational_velocity_;
  }
  translational_velocity_ = nullptr;
}
inline const ::Vec_2D& VF_Data::_internal_translational_velocity() const {
  const ::Vec_2D* p = translational_velocity_;
  return p != nullptr ? *p : *reinterpret_cast<const ::Vec_2D*>(
      &::_Vec_2D_default_instance_);
}
inline const ::Vec_2D& VF_Data::translational_velocity() const {
  // @@protoc_insertion_point(field_get:VF_Data.translational_velocity)
  return _internal_translational_velocity();
}
inline void VF_Data::unsafe_arena_set_allocated_translational_velocity(
    ::Vec_2D* translational_velocity) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(translational_velocity_);
  }
  translational_velocity_ = translational_velocity;
  if (translational_velocity) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:VF_Data.translational_velocity)
}
inline ::Vec_2D* VF_Data::release_translational_velocity() {
  auto temp = unsafe_arena_release_translational_velocity();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Vec_2D* VF_Data::unsafe_arena_release_translational_velocity() {
  // @@protoc_insertion_point(field_release:VF_Data.translational_velocity)
  
  ::Vec_2D* temp = translational_velocity_;
  translational_velocity_ = nullptr;
  return temp;
}
inline ::Vec_2D* VF_Data::_internal_mutable_translational_velocity() {
  
  if (translational_velocity_ == nullptr) {
    auto* p = CreateMaybeMessage<::Vec_2D>(GetArena());
    translational_velocity_ = p;
  }
  return translational_velocity_;
}
inline ::Vec_2D* VF_Data::mutable_translational_velocity() {
  // @@protoc_insertion_point(field_mutable:VF_Data.translational_velocity)
  return _internal_mutable_translational_velocity();
}
inline void VF_Data::set_allocated_translational_velocity(::Vec_2D* translational_velocity) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete translational_velocity_;
  }
  if (translational_velocity) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(translational_velocity);
    if (message_arena != submessage_arena) {
      translational_velocity = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, translational_velocity, submessage_arena);
    }
    
  } else {
    
  }
  translational_velocity_ = translational_velocity;
  // @@protoc_insertion_point(field_set_allocated:VF_Data.translational_velocity)
}

// float rotational_displacement = 3;
inline void VF_Data::clear_rotational_displacement() {
  rotational_displacement_ = 0;
}
inline float VF_Data::_internal_rotational_displacement() const {
  return rotational_displacement_;
}
inline float VF_Data::rotational_displacement() const {
  // @@protoc_insertion_point(field_get:VF_Data.rotational_displacement)
  return _internal_rotational_displacement();
}
inline void VF_Data::_internal_set_rotational_displacement(float value) {
  
  rotational_displacement_ = value;
}
inline void VF_Data::set_rotational_displacement(float value) {
  _internal_set_rotational_displacement(value);
  // @@protoc_insertion_point(field_set:VF_Data.rotational_displacement)
}

// float rotational_velocity = 4;
inline void VF_Data::clear_rotational_velocity() {
  rotational_velocity_ = 0;
}
inline float VF_Data::_internal_rotational_velocity() const {
  return rotational_velocity_;
}
inline float VF_Data::rotational_velocity() const {
  // @@protoc_insertion_point(field_get:VF_Data.rotational_velocity)
  return _internal_rotational_velocity();
}
inline void VF_Data::_internal_set_rotational_velocity(float value) {
  
  rotational_velocity_ = value;
}
inline void VF_Data::set_rotational_velocity(float value) {
  _internal_set_rotational_velocity(value);
  // @@protoc_insertion_point(field_set:VF_Data.rotational_velocity)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_vFirmware_5fAPI_2eproto
